rules_version = '2';

// Firestore rules
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if 
        request.auth.uid == userId &&
        request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'city', 'userType', 'isProfessional']) &&
        request.resource.data.email is string &&
        request.resource.data.firstName is string &&
        request.resource.data.lastName is string &&
        request.resource.data.city is string &&
        request.resource.data.userType in ['Client', 'Professional'] &&
        request.resource.data.isProfessional is bool;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // Posts collection rules
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if 
        isAuthenticated() &&
        request.resource.data.keys().hasAll(['userId', 'message', 'city', 'activity', 'type']) &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.message is string &&
        request.resource.data.city is string &&
        request.resource.data.activity is string &&
        request.resource.data.type in ['request', 'offer'] &&
        request.resource.data.createdAt is timestamp;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Default deny rule
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// Storage rules
service firebase.storage {
  match /b/{bucket}/o {
    // Audio files rules
    match /audio/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
                   && request.resource.size < 10 * 1024 * 1024  // 10MB max
                   && request.resource.contentType.matches('audio/.*');
    }

    // Profile pictures rules
    match /profile_pictures/{userId}/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
                   && request.auth.uid == userId
                   && request.resource.size < 5 * 1024 * 1024  // 5MB max
                   && request.resource.contentType.matches('image/.*');
    }

    // Default deny rule
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
